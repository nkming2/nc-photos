// ignore_for_file: unused_element, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NpExiv2C {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NpExiv2C(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NpExiv2C.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Extract metadata from a file pointed to by @a path
  ///
  /// @return A handle to retrieve actual results, 0 if failed
  ffi.Pointer<Exiv2ReadResult> exiv2_read_file(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _exiv2_read_file(
      path,
    );
  }

  late final _exiv2_read_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Exiv2ReadResult> Function(
              ffi.Pointer<ffi.Char>)>>('exiv2_read_file');
  late final _exiv2_read_file = _exiv2_read_filePtr.asFunction<
      ffi.Pointer<Exiv2ReadResult> Function(ffi.Pointer<ffi.Char>)>();

  /// Extract metadata from a buffer
  ///
  /// @return A handle to retrieve actual results, 0 if failed
  ffi.Pointer<Exiv2ReadResult> exiv2_read_buffer(
    ffi.Pointer<ffi.Uint8> buffer,
    int size,
  ) {
    return _exiv2_read_buffer(
      buffer,
      size,
    );
  }

  late final _exiv2_read_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Exiv2ReadResult> Function(
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('exiv2_read_buffer');
  late final _exiv2_read_buffer = _exiv2_read_bufferPtr.asFunction<
      ffi.Pointer<Exiv2ReadResult> Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Release the resources of a Exiv2ReadResult object returned by
  /// @a exiv2_read_file
  void exiv2_result_free(
    ffi.Pointer<Exiv2ReadResult> that,
  ) {
    return _exiv2_result_free(
      that,
    );
  }

  late final _exiv2_result_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Exiv2ReadResult>)>>(
      'exiv2_result_free');
  late final _exiv2_result_free = _exiv2_result_freePtr
      .asFunction<void Function(ffi.Pointer<Exiv2ReadResult>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

enum Exiv2TypeId {
  exiv2_type_id_unsigned_byte(0),
  exiv2_type_id_ascii_string(1),
  exiv2_type_id_unsigned_short(2),
  exiv2_type_id_unsigned_long(3),
  exiv2_type_id_unsigned_rational(4),
  exiv2_type_id_signed_byte(5),
  exiv2_type_id_undefined(6),
  exiv2_type_id_signed_short(7),
  exiv2_type_id_signed_long(8),
  exiv2_type_id_signed_rational(9),
  exiv2_type_id_tiff_float(10),
  exiv2_type_id_tiff_double(11),
  exiv2_type_id_tiff_ifd(12),
  exiv2_type_id_unsigned_long_long(13),
  exiv2_type_id_signed_long_long(14),
  exiv2_type_id_tiff_ifd8(15),
  exiv2_type_id_string(16),
  exiv2_type_id_date(17),
  exiv2_type_id_time(18),
  exiv2_type_id_comment(19),
  exiv2_type_id_directory(20),
  exiv2_type_id_xmp_text(21),
  exiv2_type_id_xmp_alt(22),
  exiv2_type_id_xmp_bag(23),
  exiv2_type_id_xmp_seq(24),
  exiv2_type_id_lang_alt(25),
  exiv2_type_id_invalid_type_id(26);

  final int value;
  const Exiv2TypeId(this.value);

  static Exiv2TypeId fromValue(int value) => switch (value) {
        0 => exiv2_type_id_unsigned_byte,
        1 => exiv2_type_id_ascii_string,
        2 => exiv2_type_id_unsigned_short,
        3 => exiv2_type_id_unsigned_long,
        4 => exiv2_type_id_unsigned_rational,
        5 => exiv2_type_id_signed_byte,
        6 => exiv2_type_id_undefined,
        7 => exiv2_type_id_signed_short,
        8 => exiv2_type_id_signed_long,
        9 => exiv2_type_id_signed_rational,
        10 => exiv2_type_id_tiff_float,
        11 => exiv2_type_id_tiff_double,
        12 => exiv2_type_id_tiff_ifd,
        13 => exiv2_type_id_unsigned_long_long,
        14 => exiv2_type_id_signed_long_long,
        15 => exiv2_type_id_tiff_ifd8,
        16 => exiv2_type_id_string,
        17 => exiv2_type_id_date,
        18 => exiv2_type_id_time,
        19 => exiv2_type_id_comment,
        20 => exiv2_type_id_directory,
        21 => exiv2_type_id_xmp_text,
        22 => exiv2_type_id_xmp_alt,
        23 => exiv2_type_id_xmp_bag,
        24 => exiv2_type_id_xmp_seq,
        25 => exiv2_type_id_lang_alt,
        26 => exiv2_type_id_invalid_type_id,
        _ => throw ArgumentError("Unknown value for Exiv2TypeId: $value"),
      };
}

/// A key value pair
final class Exiv2Metadatum extends ffi.Struct {
  external ffi.Pointer<ffi.Char> tag_key;

  @ffi.UnsignedInt()
  external int type_idAsInt;

  Exiv2TypeId get type_id => Exiv2TypeId.fromValue(type_idAsInt);

  external ffi.Pointer<ffi.Uint8> data;

  @ffi.Size()
  external int size;

  @ffi.Size()
  external int count;
}

final class Exiv2ReadResult extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;

  external ffi.Pointer<Exiv2Metadatum> iptc_data;

  @ffi.Size()
  external int iptc_count;

  external ffi.Pointer<Exiv2Metadatum> exif_data;

  @ffi.Size()
  external int exif_count;

  external ffi.Pointer<Exiv2Metadatum> xmp_data;

  @ffi.Size()
  external int xmp_count;
}

const int NULL = 0;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 0;

const int __DARWIN_64_BIT_INO_T = 0;

const int __DARWIN_VERS_1050 = 0;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int __has_ptrcheck = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;
